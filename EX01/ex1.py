# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cDVZBIP9l4lZKayLeMBlunvTJFKpDWh4
"""

import numpy as np

np.random.seed(42)

num_rows = 300
num_cols = 6

means = [2.5, 20, 30, 40, 50, 60]

stds = [1, 2, 3, 4, 5, 6]

dataset = np.empty((num_rows, num_cols))

for col in range(num_cols):
    #to have a column with only int
    if col == 3:
        column_data = np.random.randint(1, 100, size=num_rows)
    #to have a column with a negative correlation
    elif col ==2:
        column_data = dataset[:, 1] * -0.8 + np.random.normal(means[col], stds[col], size=num_rows) * -0.8
    #to have a column with a positive correlation
    elif col ==5:
        column_data = dataset[:, 4] * np.random.normal(means[col], stds[col], size=num_rows) +700
    #two columns generated randomly should have no correlation 
    # so we don't have to do anything to have a correlation close to 0
    else:
        column_data = np.random.normal(means[col], stds[col], size=num_rows)
    dataset[:, col] = column_data

column_means = np.mean(dataset, axis=0)
column_std = np.std(dataset, axis=0)
print ("Correlation negative:", np.corrcoef(dataset[:, 1].flatten(), dataset[:, 2].flatten(), rowvar=False)[0,1])
print ("Correlation positive:", np.corrcoef(dataset[:, 4].flatten(), dataset[:, 5].flatten(), rowvar=False)[0,1])
print ("Correlation Zero:", np.corrcoef(dataset[:, 3].flatten(), dataset[:, 4].flatten(), rowvar=False)[0,1])
# Print the mean of each column
for i, mean in enumerate(column_means):
    print("Mean of column", i+1, ":", mean)
for i, std_col in enumerate(column_std):
    print("standard deviation of column", i+1, ":", std_col)

print (np.info(dataset))

